function resonance_scanner
clear all;
close all;  
colors={'blue','red','green','cyan' ,'magenta'};
center422=220;
center1092=65;
% Open connection to FPGA host (by TCP\IP protocol)
com=Tcp2Labview('132.77.40.77',6340);
%% ------------- building the GUI
    fig=figure('Position',[200,200,800,600],...
               'CloseRequestFcn',@figclose_callback,...
               'ToolBar','figure');	
    annotation(fig,'textbox','Units','pixels',...
            'Position',[300 550  270 40],...
            'String',{'Resonance Scanner'},...
            'FontWeight','demi',...
            'FontSize',14,...
            'FontName','Arial',...
            'Color',[0.07843 0.1686 0.549],...
            'LineStyle','none',...
            'FitBoxToText','off');
    %------------scan panel-----------------------
    h_panel = uipanel(fig,'Units','pixels',...
            'Position',[300   400   450   130],...
            'FontSize',12,...
            'Title','One dimension scan parameters:');
    vstart=NumControl(h_panel,10,10,'From :','value',-25,'increase',1);
    vend=NumControl(h_panel,110,10,' To','value',25,'increase',1);    
    steps=NumControl(h_panel,210,10,'Steps','value',10,'increase',1);   
    h_pop = uicontrol('Parent',h_panel,'Style', 'popup',...
           'String',' 422 AOM | 1092 AOM',...
           'Position', [170 70 100 30],...
           'BackGroundColor', [1 1 1]);
    uicontrol(h_panel,'Style','text',...
           'Position',[10 80 150 20],...
           'FontSize',11,...
           'String','Channel to scan :');
    h_scan = uicontrol(h_panel,'style','togglebutton',...
           'Position',[330 80 100 30],...
           'String','Run Scan',...
           'FontSize',11,'FontWeight','demi',...         
           'Callback',@runscan_callback);
    % ---------------Static values panel-----------
    h_static = uipanel(fig,'Units','pixels',...
            'Position',[30   310   230   220],...
            'FontSize',12,...
            'Title','Static values setting');
    init422=NumControl(h_static,10,130,'422','value',0,'increase',1);
    init1092=NumControl(h_static,10,70,'1092','value',0,'increase',1);
    rep=NumControl(h_static,10,10,'Repeat each','value',100,'increase',1);
    h_run = uicontrol(h_static,'style','togglebutton',...
           'Position',[120 80 70 30],...
           'String','Run',...
           'FontSize',11,'FontWeight','demi',...         
           'Callback',@run_callback);
    h_singelseq = uicontrol(h_static,'style','radiobutton',...
           'Position',[120 50 100 30],...
           'String','Single Seq',...
           'FontSize',10);  
    h_res_on = uicontrol(h_static,'style','radiobutton',...
           'Position',[120 20 100 30],...
           'String','keep res on',...
           'FontSize',10);         

    %----------------- plotting axes --------------
    h_axis=axes('Parent',fig,'units','pixels','Position',[350 50 400 250],...
            'NextPlot','add','ButtonDownFcn',@axes_callback);
    axis(h_axis,[-40 40 0 70]); 
    grid(h_axis);
    xlabel(h_axis,'Frequency[MHz]');
    ylabel(h_axis,'Photon Count');
    title(h_axis,'Resonance Spectrum');
    
    h_clear_axes = uicontrol('Parent',fig,'style','pushbutton',...
           'Position',[350 330 60 25],...
           'String','clear',...
           'FontSize',11,'FontWeight','demi',...         
           'Callback',@clear_axes_callback);
    h_pop_color = uicontrol('Parent',fig,'Style', 'popup',...
           'String',' blue | red | green | cyan | magenta',...
           'Position', [420 320 75 30],...
           'BackGroundColor', [1 1 1]);

    h_hist=axes('Parent',fig,'units','pixels','Position',[50 50 200 150]);
    axis(h_hist,[0 70 0 50]);
    xlabel(h_hist,'photons');
    ylabel(h_hist,'Counts');
    title(h_hist,'Photon Count Histogram');
    
    h_photon_avg=uicontrol(fig,'Style','text',...
           'Position',[50 230 120 50],...
           'FontSize',34,...
           'FontName','Arial');
    h_photon_dark=uicontrol(fig,'Style','text',...
           'Position',[170 230 120 50],...
           'FontSize',34,...
           'FontName','Arial');

    annotation(fig,'textbox','Units','pixels',...
            'Position',[50 280 150 30],...
            'String','Photons average:',...
            'FontSize',12,...
            'FontName','Arial',...
            'LineStyle','none');  
%% ------------- CallBack Functions 
    function figclose_callback(hObject,eventdata)
        disp('closing figure');
        com.Delete;
        delete(hObject);
    end

    function clear_axes_callback(hObject,eventdata)
       disp('clear figure');
       cla(h_axis);
       
    end

    function axes_callback(hObject,eventdata)
       
       mp=get(h_axis,'CurrentPoint');
       init422.SetValue(mp(1,1));
    end

    function runscan_callback(hObject,eventdata)
       button_state = get(hObject,'Value');
       if (button_state == get(hObject,'Max'))	
          set(hObject,'String','Running')
          % main program 
          scan_run;
          set(hObject,'value',get(hObject,'Min'));
          set(hObject,'String','Run Scan')
       end
    end

    function run_callback(hObject,eventdata)
       button_state = get(hObject,'Value');
       if (button_state == get(hObject,'Max'))
           if (get(h_singelseq,'value')==get(h_singelseq,'Min'))
              set(hObject,'String','Stop')
              while get(hObject,'Value')==get(hObject,'Max')
                % run experiment
                single_run(init422.N,init1092.N);
                pause(0.1);
              end
              set(hObject,'String','Run')
           else 
              % run experiment
              single_run(init422.N,init1092.N);
              set(hObject,'value',get(hObject,'Min'));
           end
       end
    end
%% ----------- main scan loop function --------------;
    
    %---------single sequence function --------------
    function r=single_run(f422,f1092)
        T408=10;

        % setting the AOM freq with a "only off pulse"
        init=[ Pulse('OnRes422',0,-1,'freq',f422+center422)...
               Pulse('Repump1092',0,0,'freq',f1092+center1092)];          
        cooling=Pulse('OffRes422',10,1000);
        
        repump1033=Pulse('Repump1033',10,1000);
        rap408=Pulse('RAP408',1010,T408,'freq',5000);
        detection=Pulse('OnRes422',1100,500);
        opticalpumping=Pulse('OpticalPumping',1100,500);
        photoncount=Pulse('PhotonCount',1100,500);
        
        % set the cooling/OnResonance back on with "only on pulse"
        if (get(h_res_on,'value')==get(h_singelseq,'Min'))
            ending=Pulse('OffRes422',1700,0);
        else
            ending=Pulse('OnRes422',1700,0);
        end

        seq=[init cooling repump1033 rap408,...
            Shift(detection,T408) Shift(photoncount,T408) Shift(ending,T408)];
        %seq=[init cooling detection photoncount ending];


        prog=CodeGenerator;
        prog.GenSeq(seq);
        prog.GenFinish;
        %disp(prog.code);
        %prog.DisplayCode;
        

        % FPGA/Host control
        com.UploadCode(prog);
        com.UpdateFpga;
        com.WaitForHostIdle;
        com.Execute(rep.N);
        r=com.ReadOut(rep.N*prog.numofreadout);
       
        hist(h_hist,r,0:2:70);
        dark=sum(r<8);
        axis(h_hist,[0 70 0 100]);
        xlabel(h_hist,'photons');
        ylabel(h_hist,'Counts');
        title(h_hist,'Photon Count Histogram');
        r_mean=mean(r);
        set(h_photon_avg,'String',num2str(r_mean));
        set(h_photon_dark,'String',num2str(dark));
        switch get(h_pop,'Value');
           case 1
                hplot=plot(h_axis,f422,r_mean,'.');
                set(hplot,'color',colors{get(h_pop_color,'Value')});
           case 2
                hplot=plot(h_axis,f1092,r_mean,'.');
                set(hplot,'color',colors{get(h_pop_color,'Value')});
        end
        assignin('base','result',r)
    end
    %----------------- scan function -----------------
    function r=scan_run
        fscan=linspace(vstart.N,vend.N,steps.N);
        
        cooling=Pulse('OffRes422',10,1000);
        detection=Pulse('OnRes422',1100,500);
        photoncount=Pulse('PhotonCount',1100,500);
        % set the coolinge back on with "only on pulse"
        ending=Pulse('OffRes422',1700,0);
        
        switch get(h_pop,'Value');
            case 1
                init=[ Pulse('OnRes422',0,-1,'freq',fscan(1)+center422)...
                       Pulse('Repump1092',0,0,'freq',init1092.N+center1092) ];
            case 2
                init=[ Pulse('OnRes422',0,-1,'freq',init422.N+center422)...
                       Pulse('Repump1092',0,0,'freq',fscan(1)+center1092) ];
        end
        hline=plot(h_axis,[fscan(1) fscan(1)],[0 0]);
        set(hline,'color',colors{get(h_pop_color,'Value')});
        set(hline,'marker','.');
      
        seq=[init cooling detection photoncount ending]; 
        prog=CodeGenerator;
        prog.GenSeq(seq);
        prog.GenFinish;
        %prog.DisplayCode;
        com.UploadCode(prog);
        com.UpdateFpga;
        result=[];
        for i=1:steps.N
            %tic
            % execute the current program on the fpga
            com.WaitForHostIdle;
            com.Execute(rep.N);  
            num2read=prog.numofreadout;
            % Parallel to the FPGA compile and upload the next prog
            switch get(h_pop,'Value');
                case 1
                    init=Pulse('OnRes422',0,-1,'freq',fscan(i)+center422) ;
                case 2
                    init=Pulse('Repump1092',0,0,'freq',fscan(i)+center1092);
            end
            seq=[init cooling detection photoncount ending]; 

            prog=CodeGenerator;
            prog.GenSeq(seq);
            prog.GenFinish;
            %prog.DisplayCode;
            
            % FPGA/Host control
            com.WaitForHostIdle;
            com.UploadCode(prog);
            r=com.ReadOut(rep.N*num2read); 
            com.UpdateFpga;
 
            % plot new data
            hist(h_hist,r,0:2:70);
            axis(h_hist,[0 70 0 100]);
            xlabel(h_hist,'photons');
            ylabel(h_hist,'Counts');
            title(h_hist,'Photon Count Histogram');            
            r_mean=mean(r);
            result=[result r_mean];
            set(h_photon_avg,'String',num2str(r_mean));
            set(hline,'XData',[ get(hline,'XData') fscan(i)]);
            set(hline,'YData',[ get(hline,'YData') r_mean ]); 
            pause(0.01);
            %disp(toc);
        end% for loop
        assignin('base','counts',result);
        assignin('base','freq',fscan);
        
    end
    
end

