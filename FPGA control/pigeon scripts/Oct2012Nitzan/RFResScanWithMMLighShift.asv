function RFResScanWithMMLighShift
dic=Dictator.me;
freqSpan=(-0.4:0.01:0.4);
freqSpan=-0.01:0.0005:0.01;

% freqSpan=-3:0.02:3;
freqList=freqSpan+dic.FRF;
%freqList=linspace(5,6,20);

%Set novatech oscillators 
MMFreq=21.75;
DoublePassFreq=dic.updateF674-MMFreq/2;
dic.setNovatech('DoublePass','freq',DoublePassFreq,'amp',1000);
dic.setNovatech('Parity','freq',dic.SinglePass674freq-MMFreq,'amp',1000);

%-------------- Set GUI figures ---------------------
InitializeAxes (dic.GUI.sca(1),'Photons #','Cases Counted #','Fluorescence Histogram',...
                [0 dic.maxPhotonsNumPerReadout],[],0);
lines =InitializeAxes (dic.GUI.sca(9),'F_{RF} [MHz]','Dark Counts %','Zeeman line',...
                       [freqList(1) freqList(end)],[0 100],2);
set(lines(1),'XData',[],'YData',[],'Marker','.','MarkerSize',10);
set(lines(2),'Color',[0 0 0],'XData',[],'YData',[]);

%-------------- Main function scan loops ---------------------

dark = zeros(size(freqList));
if dic.SitOnItFlag
    cont=1;
    while (cont)
        if (dic.stop)
            cont=0;
        end
        DoublePassFreq=dic.updateF674-MMFreq/2;
        dic.setNovatech('DoublePass','freq',DoublePassFreq,'amp',1000);
        r=experimentSequence(dic.FRF);
        dic.GUI.sca(1); %get an axis from Dictator GUI to show data
        hist(r,1:1:dic.maxPhotonsNumPerReadout);
        xlabel(num2str(sum( r<dic.darkCountThreshold)/length(r)*100,2),...
            'FontSize',100);
    end
else
    for index1 = 1:length(freqList)
        if dic.stop
            return
        end
        r=experimentSequence(freqList(index1));
        dic.GUI.sca(1); 
        hist(r,1:2:dic.maxPhotonsNumPerReadout);
        if dic.TwoIonFlag
            dark(index1) =100-sum( (r>dic.TwoIonsCountThreshold)*2+...
                                 ((r>dic.darkCountThreshold)&(r<dic.TwoIonsCountThreshold))*1 ...
                                )/2/length(r)*100;
        else
            dark(index1) = sum( r<dic.darkCountThreshold)/length(r)*100;
        end
        AddLinePoint(lines(1),freqList(index1),dark(index1))
    end
    %---------- fitting and updating ---------------------

    ft=fittype('100-a*sinc((x-b)*c).^2');
    fo=fitoptions('Method','NonlinearLeastSquares',...
           'Startpoint',[100,dic.FRF,10],'Lower',[10 1 0],'Upper',[100 15 500]);
    [curve,goodness]=fit(freqList',dark',ft,fo);
  %  dic.FRF=curve.b;
    set(lines(2),'Color',[0 0 0],'XData',freqList,'YData',feval(curve,freqList));
    disp(sprintf('RF resonance freq is set to %2.3f MHz',curve.b));

    %------------ Save data ------------------
    if (dic.AutoSaveFlag)
        showData='figure;plot(freqList,dark);xlabel(''F_{RF} [Mhz]'');ylabel(''dark[%]'');';
        dic.save;
    end 
end
%---------------------------------------------------------------------
function r=experimentSequence(freq)
    prog=CodeGenerator; 
    prog.GenDDSPullParametersFromBase;
    prog.GenSeq(Pulse('ExperimentTrigger',0,50));
    prog.GenSeq(Pulse('674DDS1Switch',2,-1,'freq',dic.SinglePass674freq-MMFreq-0.1,'amp',100));
    prog.GenSeq(Pulse('RFDDS2Switch',2,-1,'freq',freq,'amp',dic.ampRF));
    prog.GenSeq(Pulse('OffRes422',0,1));
    prog.GenSeq(Pulse('OnResCooling',0,dic.Tcooling));
    %activate noise eater, move it to int hold and repump
%     prog.GenSeq([Pulse('674DDS1Switch',0,20),...
%         Pulse('NoiseEater674',2,10),Pulse('674DoublePass',0,20)]);
    prog.GenSeq([Pulse('674Echo',0,15),... %Echo is our choice for NE calib
    Pulse('NoiseEater674',2,10),Pulse('674DoublePass',0,15),...
    Pulse('Repump1033',15,dic.T1033),...
    Pulse('OpticalPumping',16+dic.T1033,dic.Toptpump)]);

    %Do pi pulse RF with 674 light shift  
%     prog.GenSeq([Pulse('674DDS1Switch',2,10),...
%                  Pulse('674DoublePass',2,-1),...
%                  Pulse('RFDDS2Switch',10,dic.TimeRF)]);
    prog.GenSeq(Pulse('RFDDS2Switch',10,dic.TimeRF));       
   
    % Shelving pulse with parity scillator
    prog.GenSeq([Pulse('674Parity',10,dic.AddrInfo.T674Parity),...
                 Pulse('674DoublePass',10,dic.AddrInfo.T674Parity)]);
    % Detection
    prog.GenSeq([Pulse('OnRes422',0,dic.TDetection)...
        Pulse('PhotonCount',0,dic.TDetection)]);
    %resume cooling
    prog.GenSeq(Pulse('Repump1033',0,dic.T1033));
    prog.GenSeq(Pulse('OffRes422',0,0));
    
    prog.GenFinish;
    %prog.DisplayCode;


    % FPGA/Host control
    n=dic.com.UploadCode(prog);
    dic.com.UpdateFpga;
    dic.com.WaitForHostIdle;

    rep=100;
    dic.com.Execute(rep);
    dic.com.WaitForHostIdle;
    r=dic.com.ReadOut(rep);
    r=r(2:end);
end
end
